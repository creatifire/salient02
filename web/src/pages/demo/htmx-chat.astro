---
import Layout from '../../layouts/Layout.astro';
---
<Layout>
  <section style="padding:2rem 0;">
    <h1 style="font-size:2rem;margin:0 0 .5rem;">Standalone HTMX Chat (Astro Demo)</h1>
    <div class="chat" aria-live="polite"></div>
    <textarea id="msg" class="textarea" placeholder="Type your message… (Ctrl/Cmd+Enter to send)"></textarea>
    <div class="row">
      <button id="send" class="btn primary" type="button">Send</button>
      <button id="clear" class="btn" type="button">Clear</button>
      <span id="hint" class="hint" style="display:none;">Receiving…</span>
    </div>
  </section>
  <script src="https://unpkg.com/htmx.org@1.9.12" is:inline></script>
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js" is:inline></script>
  <script src="https://cdn.jsdelivr.net/npm/dompurify@3.1.7/dist/purify.min.js" is:inline></script>
  <style is:inline>
    .chat{ border:1px solid #eee; border-radius:8px; padding:.5rem; height: 320px; overflow:auto; background:#fff; display:flex; flex-direction:column; gap:.4rem; }
    .msg{ position:relative; padding:.4rem .6rem; border-radius:6px; max-width:85%; word-wrap:break-word; }
    .msg.user{ background:#eef6ff; align-self:flex-end; margin-left:auto; }
    .msg.bot{ background:#fffbe6; align-self:flex-start; margin-right:auto; }
    .content{ white-space:pre-wrap; }
    .copy{ position:absolute; bottom:6px; right:6px; background:rgba(255,255,255,.9); border:1px solid #ddd; border-radius:6px; padding:4px; width:22px; height:22px; display:flex; align-items:center; justify-content:center; opacity:.2; transition:opacity .15s ease, transform .1s ease; cursor:pointer; }
    .copy img{ width:14px; height:14px; display:block; }
    .msg.bot:hover .copy, .copy:focus{ opacity:1; }
    .copy:active{ transform: scale(.96); }
    .copy[disabled]{ opacity:.2 !important; pointer-events:none; cursor:not-allowed; }
    .row{ display:flex; align-items:center; gap:.5rem; margin-top:.5rem; }
    .btn{ padding:.45rem .7rem; border:1px solid #ccc; border-radius:6px; background:#f6f6f6; color:#111; }
    .btn.primary{ background:#108D43; color:#fff; border-color:#108D43; }
    .btn:disabled{ opacity:.6; cursor:not-allowed; }
    .textarea{ width:100%; min-height:6rem; padding:.5rem; border:1px solid #ddd; border-radius:6px; margin-top:.5rem; }
    .hint{ font-size:.85rem; color:#666; }
  </style>
  <script is:inline>
    const chat = document.querySelector('.chat');
    const msg = document.getElementById('msg');
    const sendBtn = document.getElementById('send');
    const clearBtn = document.getElementById('clear');
    const hint = document.getElementById('hint');

    let activeSSE = null;
    let activeBotDiv = null;
    let accumulated = '';
    let busy = false;

    function addCopyButton(container){
      const btn = document.createElement('button');
      btn.className = 'copy';
      btn.type = 'button';
      btn.setAttribute('aria-label','Copy message');
      btn.title = 'Copy';
      const img = document.createElement('img');
      img.src = '/widget/chat-copy.svg';
      img.alt = '';
      btn.appendChild(img);
      btn.disabled = busy;
      btn.addEventListener('click', async ()=>{
        const raw = container.dataset.raw || container.textContent || '';
        try{ await navigator.clipboard.writeText(raw); }catch{
          const ta=document.createElement('textarea'); ta.value=raw; ta.style.position='fixed'; ta.style.opacity='0'; document.body.appendChild(ta); ta.select(); document.execCommand && document.execCommand('copy'); ta.remove();
        }
      });
      container.appendChild(btn);
    }

    function appendMessage(role, text){
      const div = document.createElement('div');
      div.className = `msg ${role}`;
      const content = document.createElement('div');
      content.className = 'content';
      content.textContent = text || '';
      div.appendChild(content);
      if (role === 'bot') addCopyButton(div);
      chat.appendChild(div);
      chat.scrollTop = chat.scrollHeight;
      return div;
    }
    function setBusy(v){
      busy = v;
      sendBtn.disabled = v;
      clearBtn.disabled = v;
      hint.style.display = v ? 'inline' : 'none';
      chat.querySelectorAll('.copy').forEach(b=>{ b.disabled = v; });
    }

    clearBtn?.addEventListener('click', ()=>{ chat.innerHTML=''; });

    // Debounce helper (parity with backend index.html behavior)
    function debounce(fn, ms){ let t; return (...args)=>{ clearTimeout(t); t = setTimeout(()=>fn.apply(null,args), ms); } }
    const debouncedNoop = debounce(()=>{}, 300);
    msg?.addEventListener('input', debouncedNoop);

    function renderMarkdownOrFallback(container, raw){
      const trimmed = (raw||'').trim();
      const content = container.querySelector('.content') || container;
      try{
        const html = DOMPurify.sanitize(marked.parse(trimmed));
        if (!html || html.replace(/\s/g,'') === ''){
          content.textContent = trimmed || '[no response]';
        } else {
          content.innerHTML = html;
        }
      } catch {
        content.textContent = trimmed || '[no response]';
      }
    }

    async function doPost(text){
      try{
        const r = await fetch('/chat', { method:'POST', headers:{ 'Content-Type':'application/json' }, body: JSON.stringify({ message: text }) });
        const out = r.ok ? await r.text() : `[http ${r.status}]`;
        if (activeBotDiv){
          activeBotDiv.dataset.raw = out;
          renderMarkdownOrFallback(activeBotDiv, out);
        }
      }catch{ if(activeBotDiv) activeBotDiv.textContent='[network error]'; }
      finally{ setBusy(false); }
    }

    function send(){
      if (busy) return;
      const value = (msg.value||'').trim();
      if (!value) return;
      appendMessage('user', value);
      msg.value = '';

      activeBotDiv = appendMessage('bot', '');
      accumulated = '';
      setBusy(true);

      const url = new URL('/events/stream', window.location.origin);
      url.searchParams.set('llm','1');
      url.searchParams.set('message', value);
      try{
        const es = new EventSource(url.toString());
        activeSSE = es;
        es.onmessage = (ev)=>{
          accumulated += ev.data;
          if (activeBotDiv){
            activeBotDiv.dataset.raw = accumulated;
            const content = activeBotDiv.querySelector('.content') || activeBotDiv;
            content.textContent = accumulated;
            chat.scrollTop = chat.scrollHeight;
          }
        };
        es.addEventListener('end', ()=>{
          try{ es.close(); }catch{}
          activeSSE = null;
          if (activeBotDiv){
            renderMarkdownOrFallback(activeBotDiv, accumulated);
          }
          setBusy(false);
        });
        es.onerror = ()=>{ try{ es.close(); }catch{}; activeSSE=null; doPost(value); };
      }catch{ doPost(value); }
    }

    sendBtn?.addEventListener('click', send);
    msg?.addEventListener('keydown', (e)=>{
      const isEnter = e.key === 'Enter';
      const isCtrl = e.ctrlKey || e.metaKey;
      if (isEnter && isCtrl){ e.preventDefault(); send(); }
    });
  </script>
</Layout>
