---
import Layout from '../layouts/Layout.astro';
---
<Layout>
  <section style="padding:2rem 0;">
    <h1 style="font-size:2rem;margin:0 0 .5rem;">Development Logs</h1>
    <p id="log-info" style="margin:0 0 1rem;color:#666;">Loading logs...</p>
    
    <div id="logs-container">
      <div style="background:#f8f9fa;padding:2rem;border-radius:0.5rem;text-align:center;color:#666;">
        Loading development logs...
      </div>
    </div>
    
    <p style="margin-top:1rem;font-size:.9rem;color:#999;">
      This page is for development only. Do not expose in production.
    </p>
  </section>
  
  <script>
    let rawLogData = []; // Store raw entries for expansion
    
    async function loadLogs() {
      try {
        // Load both pretty and raw formats
        const [prettyResponse, rawResponse] = await Promise.all([
          fetch('http://localhost:8000/dev/logs/tail?format=pretty'),
          fetch('http://localhost:8000/dev/logs/tail')
        ]);
        
        const prettyData = await prettyResponse.json();
        const rawData = await rawResponse.json();
        
        if (prettyData.error) {
          showError(`Backend error: ${prettyData.error}`);
          return;
        }
        
        rawLogData = rawData.entries || [];
        
        // Update info  
        document.getElementById('log-info').textContent = 
          `Showing last entries from: ${prettyData.file || 'n/a'} (${prettyData.entries?.length || 0} entries)`;
        
        // Display logs with expandable functionality
        const container = document.getElementById('logs-container');
        if (prettyData.entries && prettyData.entries.length > 0) {
          container.innerHTML = prettyData.entries.map((entry, index) => 
            `<div class="log-entry" data-index="${index}" style="margin-bottom:0.75rem;">
              <div class="log-preview" style="background:#f5f5f5;padding:1rem;border-radius:.5rem;font-family:Monaco,Consolas,monospace;font-size:0.9rem;border-left:3px solid #28a745;cursor:pointer;position:relative;">
                <div style="white-space:pre-wrap;overflow:hidden;max-height:4em;line-height:1.4;">${escapeHtml(entry)}</div>
                <div class="expand-hint" style="position:absolute;bottom:0.5rem;right:0.5rem;background:rgba(255,255,255,0.8);padding:0.2rem 0.5rem;border-radius:0.25rem;font-size:0.8rem;color:#666;">Click to expand</div>
              </div>
              <div class="log-expanded" style="display:none;background:#f8f9fa;padding:1rem;border-radius:.5rem;font-family:Monaco,Consolas,monospace;font-size:0.85rem;border-left:3px solid #007bff;margin-top:0.5rem;">
                <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:0.5rem;">
                  <strong style="color:#007bff;">Full Log Entry (Raw JSON)</strong>
                  <button class="collapse-btn" style="background:#007bff;color:white;border:none;padding:0.25rem 0.5rem;border-radius:0.25rem;font-size:0.8rem;cursor:pointer;">Collapse</button>
                </div>
                <pre style="white-space:pre-wrap;margin:0;max-height:20em;overflow-y:auto;background:#fff;padding:1rem;border-radius:0.25rem;" id="raw-${index}">Loading...</pre>
              </div>
            </div>`
          ).join('');
          
          // Add click handlers
          document.querySelectorAll('.log-preview').forEach(preview => {
            preview.addEventListener('click', handleExpand);
          });
          
          document.querySelectorAll('.collapse-btn').forEach(btn => {
            btn.addEventListener('click', handleCollapse);
          });
        } else {
          container.innerHTML = '<pre style="background:#fff3cd;padding:1rem;border-radius:0.5rem;white-space:pre-wrap;text-align:center;color:#856404;">No log entries available</pre>';
        }
      } catch (error) {
        showError(`Failed to load logs: ${error.message}`);
      }
    }
    
    function handleExpand(event) {
      const logEntry = event.currentTarget.closest('.log-entry');
      const index = parseInt(logEntry.dataset.index);
      const expandedDiv = logEntry.querySelector('.log-expanded');
      const previewDiv = logEntry.querySelector('.log-preview');
      const rawPre = logEntry.querySelector(`#raw-${index}`);
      
      // Show expanded view
      previewDiv.style.display = 'none';
      expandedDiv.style.display = 'block';
      
      // Pretty-print the raw JSON
      if (rawLogData[index]) {
        try {
          const parsed = JSON.parse(rawLogData[index]);
          rawPre.textContent = JSON.stringify(parsed, null, 2);
        } catch (e) {
          rawPre.textContent = rawLogData[index];
        }
      } else {
        rawPre.textContent = 'Raw data not available';
      }
    }
    
    function handleCollapse(event) {
      event.stopPropagation();
      const logEntry = event.target.closest('.log-entry');
      const expandedDiv = logEntry.querySelector('.log-expanded');
      const previewDiv = logEntry.querySelector('.log-preview');
      
      // Show preview view
      expandedDiv.style.display = 'none';
      previewDiv.style.display = 'block';
    }
    
    function showError(message) {
      document.getElementById('log-info').textContent = 'Error loading logs';
      document.getElementById('logs-container').innerHTML = 
        `<div style="background:#f8d7da;padding:1rem;border-radius:0.5rem;color:#721c24;border-left:3px solid #dc3545;">‚ùå ${escapeHtml(message)}</div>`;
    }
    
    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }
    
    // Load logs when page loads
    loadLogs();
    
    // Add some CSS for hover effects
    const style = document.createElement('style');
    style.textContent = `
      .log-preview:hover {
        background: #e9ecef !important;
      }
      .expand-hint {
        opacity: 0.7;
        transition: opacity 0.2s;
      }
      .log-preview:hover .expand-hint {
        opacity: 1;
      }
      .collapse-btn:hover {
        background: #0056b3 !important;
      }
    `;
    document.head.appendChild(style);
  </script>
</Layout>
